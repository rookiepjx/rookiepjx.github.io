(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{289:function(t,e,n){"use strict";n.r(e);var s=n(14),a=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),e("h2",{attrs:{id:"jsx的本质"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jsx的本质"}},[t._v("#")]),t._v(" JSX的本质")]),t._v(" "),e("p",[t._v("JSX的本质是"),e("code",[t._v("React.createElement(type,config,children)")]),t._v("函数的语法糖，两种写法效果一样。")]),t._v(" "),e("p",[t._v("type:标签类型，config:属性，children:标签中的内容。实际是一个"),e("strong",[t._v("数组")]),t._v("，虽然只有一个参数代表children，但是实际可以传递多个参数。")]),t._v(" "),e("p",[t._v("React.createElement函数的返回值是一个ReactElement对象，"),e("strong",[t._v("通过这个对象构建js对象树，也就是虚拟DOM")])]),t._v(" "),e("p",[t._v("children"),e("strong",[t._v("源码")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    const childArray = Array(childrenLength);\n    for (let i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    if (__DEV__) {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n")])])]),e("p",[t._v("babel编译jsx")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// jsx 通过babel编译成js\n<script type="text/babel">\n    const message1 = <h1>Hello React</h1>\n<script/>\n\nReactDom.render(message1,document.getElementByid("#app"))\n        \n// 不需要babel编译\n<script>\n    const message2 = React.createElement("h1",null,Hello React)\n<script/>\n\nReactDom.render(message2,document.getElementByid("#app"))\n')])])]),e("p",[t._v("babel官网编译")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/rookiepjx/image-bed/img/Snipaste_2020-09-27_15-22-47.jpg",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("总结")]),t._v("：JSX --babel编译--\x3e creatElement函数 ----\x3e ReacrElement对象（虚拟DOM） --ReactDom.render函数--\x3e 真实DOM")]),t._v(" "),e("h2",{attrs:{id:"类组件和函数式组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类组件和函数式组件"}},[t._v("#")]),t._v(" 类组件和函数式组件")]),t._v(" "),e("p",[t._v("类组件")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("类组件名是大写字符开头（无论类组件还是函数组件）")])]),t._v(" "),e("li",[e("p",[t._v("类组件需要继承自 React.Component")])]),t._v(" "),e("li",[e("p",[t._v("类组件必须实现render函数")])])]),t._v(" "),e("p",[t._v("函数式组件")]),t._v(" "),e("ol",[e("li",[t._v("函数式组件没有"),e("code",[t._v("this")]),t._v("对象")]),t._v(" "),e("li",[t._v("函数式组件没有内部状态"),e("code",[t._v("state")]),t._v("(useState解决)")]),t._v(" "),e("li",[t._v("函数值组件没有"),e("code",[t._v("生命周期函数")]),t._v("（useEffect解决）")])]),t._v(" "),e("h2",{attrs:{id:"react生命周期函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react生命周期函数"}},[t._v("#")]),t._v(" React生命周期函数")]),t._v(" "),e("p",[t._v("生命周期函数是"),e("strong",[t._v("Class类组件中的概念")]),t._v("，function函数式组件没有生命周期函数的概念。函数式组件可以使用hooks模拟生命周期函数。")]),t._v(" "),e("p",[t._v("react生命周期有15和16两种版本。后续17版本也会有变化。")]),t._v(" "),e("p",[e("strong",[t._v("15版本")])]),t._v(" "),e("ol",[e("li",[t._v("初始化（initialization）")]),t._v(" "),e("li",[t._v("挂载阶段（Mounting）")]),t._v(" "),e("li",[t._v("更新阶段（Updating）")]),t._v(" "),e("li",[t._v("卸载阶段（unmounting）")])]),t._v(" "),e("p",[e("strong",[t._v("16版本")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("挂载阶段 - 组件实例被创建和插入 DOM 树的过程")])]),t._v(" "),e("li",[e("p",[t._v("更新阶段 - 组件被重新渲染的过程")])]),t._v(" "),e("li",[e("p",[t._v("卸载阶段 - 组件从 DOM 树中被删除的过程")])])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/rookiepjx/image-bed/img/Snipaste_2020-09-25_22-46-52.jpg",alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("constructor")])]),t._v(" "),e("ul",[e("li",[t._v("初始化内部state")]),t._v(" "),e("li",[t._v("为事件绑定实例this")])]),t._v(" "),e("p",[e("strong",[t._v("getDerivedStateFromProps")])]),t._v(" "),e("ul",[e("li",[t._v("state 的值在任何时候都依赖于 props时使用；该方法返回一个对象来更新state")])]),t._v(" "),e("p",[e("strong",[t._v("shouldComponentUpdate（SCU）")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("常用于性能优化。返回一个布尔值。"),e("strong",[t._v("在组件接收到新的props或者state时被调用")]),t._v("。在初始化时或者使用forceUpdate时不被调用。")]),t._v(" "),e("p",[t._v("在"),e("strong",[t._v("PureComponent")]),t._v("中自动实现了此方法")])])]),t._v(" "),e("p",[e("strong",[t._v("render")])]),t._v(" "),e("ul",[e("li",[t._v("执行渲染")])]),t._v(" "),e("p",[e("strong",[t._v("getSnapshotBeforeUpdate")])]),t._v(" "),e("ul",[e("li",[t._v("在React更新DOM之前回调的一个函数，可以获取DOM更新前的一些信息，比如说滚动位置。返回的对象将会作为componentDidUpdate函数中的snapShot函数")])]),t._v(" "),e("p",[e("strong",[t._v("componentDidMount")])]),t._v(" "),e("ul",[e("li",[t._v("DOM操作，如获取组件ref实例")]),t._v(" "),e("li",[t._v("网络请求")]),t._v(" "),e("li",[t._v("添加订阅（componentWillUnmount取消订阅）")])]),t._v(" "),e("p",[e("strong",[t._v("componentDidUpdate(preProps,preState,snapShot)")])]),t._v(" "),e("ul",[e("li",[t._v("组件更新后的DOM操作")]),t._v(" "),e("li",[t._v("props变化后的网络请求")])]),t._v(" "),e("p",[e("strong",[t._v("componentWillUnmount")])]),t._v(" "),e("ul",[e("li",[t._v("清除定时器timer")]),t._v(" "),e("li",[t._v("取消网络请求")]),t._v(" "),e("li",[t._v("取消订阅")])]),t._v(" "),e("h2",{attrs:{id:"react组件间通信"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react组件间通信"}},[t._v("#")]),t._v(" React组件间通信")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("父传子")])]),t._v(" "),e("p",[t._v("props")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 父组件引用子组件\n<Child name="pjx" age="20"/>\n    \n// 子组件\nclass Child extends Component{\n    // 此处构造函数可以省略，因为和子类的默认构造函数一样（没有定义组件自己的state）\n    constructor(props){\n        super(props)\n    }\n    reder(){\n        // es6对象解构\n        const {name,age} = this.props\n        return (\n            <h2>{name + " " + age }</h2>\n        )\n    }\n}\n')])])]),e("p",[t._v("使用"),e("code",[t._v("propTypes")]),t._v("验证props数据类型")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import propTyeps form "prop-types"\n\nChild.propTypes = {\n    // 规定数据类型和必须值\n    name:propTypes.string.isRequired,\n    age:propTypes.number\n}\n\n// 使用子组件，number、array类型需要{}包裹\n<Child name="pjx" age={20}/>\n')])])]),e("p",[t._v("设置props默认值")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('Child.defaultProps = {\n    name:"pjx",\n    age:20\n}\n')])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("子传父")])]),t._v(" "),e("p",[t._v("父组件props传递函数callback给子组件，子组件调用calbback")]),t._v(" "),e("p",[t._v("注意："),e("strong",[t._v("需要为子组件的调用的callback绑定父组件的作用域")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("this.callback.bind(this)")])]),t._v(" "),e("li",[e("p",[t._v("e => this.callback()，需要参数则 index => this.callback(index)")])]),t._v(" "),e("li",[e("p",[t._v("callback定义为箭头函数 callback = () =>{...}")])])])])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 父组件使用子组件，传递callback\n<Child callback = {e => this.callback()}/>\n\n// 子组件\nclass Child extends React.Cpmponent{\n    render(){\n        const {callback} = this.props\n        return (\n            <h2>{this.state.count}</h2>\n        \t<button onClick=callback>+1</button>\n        )\n    }\n}\n\n// 传递的props为函数\ncallback(){\n    this.setState({\n        count:this.state.count + 1\n    })\n}\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[e("p",[e("strong",[t._v("跨层级组件通信")])]),t._v(" "),e("p",[t._v("方法1：通过props一层层传递。便捷写法是 "),e("code",[t._v("{...props}")])]),t._v(" "),e("p",[t._v("方法2：Context上下文对象")]),t._v(" "),e("p",[t._v("("),e("strong",[t._v("class组件才有context对象,函数组件可以使用context.Consumer组件包裹使用共享数据")]),t._v("）")]),t._v(" "),e("p",[t._v("context相关api：")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("React.createContext")]),t._v(" 创建一个context对象。context对象提供一个"),e("strong",[t._v("Provider")]),t._v("组件，用于包裹顶层组件，向下层传递数据。如果有多个context向下传递共享数据，可以"),e("strong",[t._v("多层嵌套")]),t._v("。")]),t._v(" "),e("li",[e("strong",[t._v("contextType")]),t._v(" 为组件指定向上层寻找数据的 context对象")])]),t._v(" "),e("p",[t._v("类组件的context用法")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 创建context对象 , 并指定默认值\nconst UserContext = React.createContext({\n    nickname:"pjx",\n    level:1\n})\n\n// 使用provider组件传递共享数据\nclass App extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            nickname:"pjx",\n            level:99\n        }\n    }\n    // 使用provider组件包裹，并通过value传值\n    <UserContext.Provider value={this.state}>\n    \t<Father/>\n    </UserContext.Provider/>\n}\n\n// 使用contextType接受共享数据,并渲染数据\nclass Son extends Component{\n    // 从context对象解构出共享数据\n    const {nickname,level} = this.context\n    render(){\n        return (\n        \t<div>{nickname}</div>\n            <div>{level}</div>\n        )\n    }\n}\n// 指定组件的contextType\nSon.contextType = UserContext\n')])])]),e("p",[t._v("函数组件的context用法 (类组件也可以使用consumer)")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("   function Son(){\n\treturn (\n\t\t// 使用consumer消费组件包裹\n\t\t<UserContext.Consumer>\n\t\t\t{\n\t\t\t\tvalue => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>{value.nickname}</div>\n\t\t\t\t\t\t<div>{value.level}</div>\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t</UserContext.Consumer>\n\t)\n}\n")])])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("非嵌套组件")])]),t._v(" "),e("p",[t._v("事件总线eventBus  react中使用"),e("code",[t._v("events")]),t._v("库")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 创建eventBus对象\nconst eventBus = new EventEmitter()\n// 发射事件\nevent.emit("事件名",...args)\n// 监听事件\ncomponentDidMount(){\n    eventBus.addListener("事件名",callback)\n}\n// 移除监听\ncomponentWillUnmount(){\n    eventBus.removeListener("事件名",callback)\n}\n\n')])])]),e("p",[t._v("redux")])])]),t._v(" "),e("h2",{attrs:{id:"react插槽的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react插槽的使用"}},[t._v("#")]),t._v(" React插槽的使用")]),t._v(" "),e("p",[t._v("方法1：双标签组件嵌套子元素，通过props.children获取插槽（不推荐）")]),t._v(" "),e("p",[t._v("​\t      缺点是需要按顺序传递和获取插槽")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 定义\n<Navbar>\n\t<span>aaa</span>\n\t<p>bbb</p>\n\t<a href="/#">ccc</a>\n</Navbar>\n\n// 使用\nrender(){\n    const slot = this.porps.children\n    return (\n    \t<div className="left">{slot[0]}</div>\n\t\t<div className="cenetr">{slot[1]}</div>\n\t\t<div className="right">{slot[2]}</div>\n    )\n}\n')])])]),e("p",[t._v("方法2：单标签组件传递props(推荐)")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 定义\n<Navbar left={<span>aaa</span>} center={<p>bbb</p>} right={<a href="/#">ccc</a>}/>\n                                                           \n// 使用\nrender(){\n    const {left,center,right} = this.props\n    return (\n    \t<div className="left">{left}</div>\n\t\t<div className="cenetr">{center}</div>\n\t\t<div className="right">{right}</div>\n    )\n}                                                      \n')])])]),e("h2",{attrs:{id:"setstate同步异步问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate同步异步问题"}},[t._v("#")]),t._v(" setState同步异步问题")]),t._v(" "),e("p",[t._v("https://juejin.im/post/6844903636749778958")]),t._v(" "),e("p",[e("strong",[t._v("结论")]),t._v("：可能是同步的，也可能是异步的。"),e("strong",[t._v("合成事件")]),t._v("和"),e("strong",[t._v("生命周期函数")]),t._v("中是“异步”的，在"),e("strong",[t._v("原生事件")]),t._v("和 "),e("strong",[t._v("setTimeout")]),t._v("、"),e("strong",[t._v("Promise回调")]),t._v("中都是同步的。")]),t._v(" "),e("p",[e("strong",[t._v("更新：")])]),t._v(" "),e("p",[e("strong",[t._v("react18版本之前setState可能同步也可能异步，react18版本更新后，setState默认都加入批处理，都是异步的")])]),t._v(" "),e("p",[t._v("概念补充")]),t._v(" "),e("p",[e("strong",[t._v("合成事件")]),t._v("：react为了解决跨平台，兼容性问题，自己封装了一套事件机制，代理了原生的事件，像在"),e("code",[t._v("jsx")]),t._v("中常见的"),e("code",[t._v("onClick")]),t._v("、"),e("code",[t._v("onChange")]),t._v("这些都是合成事件")]),t._v(" "),e("p",[e("strong",[t._v("原生事件")]),t._v("：是指非react合成事件，原生自带的事件监听 "),e("code",[t._v("addEventListener")]),t._v(" ，或者也可以用原生js、jq直接 "),e("code",[t._v("document.querySelector().onclick")]),t._v(" 这种绑定事件的形式都属于原生事件")]),t._v(" "),e("p",[e("strong",[t._v("setState设计为异步的原因：")])]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("提高性能")]),t._v("。如果每调用一次setState就更新一次，那多次调用会多次触发render函数渲染界面，效率低。")]),t._v(" "),e("p",[t._v("所以应该在获取到多个setState后进行一次合并，之后"),e("strong",[t._v("批量更新")])])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("保证state和props同步")]),t._v("。如果同步执行了setState改变了state，但是render函数还没有执行，则会导致state和props不同步。")])])]),t._v(" "),e("p",[e("strong",[t._v("setState异步转同步")])]),t._v(" "),e("p",[e("strong",[t._v("react18前的版本：")])]),t._v(" "),e("ol",[e("li",[t._v("setTimeOut包裹setState")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("setTimeOut(() => {\n  this.setState({\n      count:this.state.count+1\n  })  \n},0)\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("原生dom事件监听中使用setState")])]),t._v(" "),e("p",[e("strong",[t._v("react18的版本：")])]),t._v(" "),e("p",[e("strong",[t._v("需要执行特殊的flushSync操作")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("flushSync(() => {\n\tthis.setState({\n      count:this.state.count+1\n  })\t\n})\n")])])]),e("p",[e("strong",[t._v("总结")]),t._v("：")]),t._v(" "),e("ol",[e("li",[e("p",[e("code",[t._v("setState")]),t._v(" 只在合成事件和钩子函数中是“异步”的，在原生事件和 "),e("code",[t._v("setTimeout")]),t._v(" 中都是同步的。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("setState")]),t._v("的**“异步”并不是说内部由异步代码实现，其实本身执行的过程和代码都是同步的，只是合成事件和钩子函数的调用顺序在更新之前，导致在合成事件和钩子函数中没法立马拿到更新后的值，形式了所谓的“异步”**，当然可以通过第二个参数 setState(partialState, callback) 中的callback拿到更新后的结果。")])]),t._v(" "),e("li",[e("p",[e("code",[t._v("setState")]),t._v(" 的批量更新优化也是建立在“异步”（合成事件、钩子函数）之上的，在原生事件和setTimeout 中不会批量更新，在“异步”中如果对同一个值进行多次 "),e("code",[t._v("setState")]),t._v(" ， "),e("code",[t._v("setState")]),t._v(" 的批量更新策略会对其进行覆盖，取最后一次的执行，如果是同时 "),e("code",[t._v("setState")]),t._v(" 多个不同的值，在更新时会对其进行合并批量更新。")])])]),t._v(" "),e("h2",{attrs:{id:"获取setstate异步更新结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#获取setstate异步更新结果"}},[t._v("#")]),t._v(" 获取setState异步更新结果")]),t._v(" "),e("p",[t._v("方法1：")]),t._v(" "),e("p",[t._v("setState的第二个参数是一个回调函数。作用类似于vue中的"),e("code",[t._v("nextTick")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.setState({\n    count:this.state.count+1\n},() => {\n    console.log(this.state.count)\n})\n")])])]),e("p",[t._v("方法2：")]),t._v(" "),e("p",[t._v("componentDidUpdate生命周期函数")]),t._v(" "),e("h2",{attrs:{id:"setstate的合并"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate的合并"}},[t._v("#")]),t._v(" setState的合并")]),t._v(" "),e("p",[t._v("合并包括数据合并和setState本身的合并")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("数据合并")]),t._v(" "),e("p",[e("strong",[t._v("当setState({obj})时，obj不会覆盖state，而是合并。")])]),t._v(" "),e("p",[t._v("setState传入的是一个对象，底层是通过"),e("code",[t._v("Object.assign")]),t._v("方法将源对象的可枚举属性，复制到目标对象。并且源对象与目标对象如果有同名属性，则覆盖。没有，则新增。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const target = { a: 1, b: 2 };\nconst source = { b: 4, c: 5 };\n\nconst returnedTarget = Object.assign(target, source);\n\nconsole.log(target); // {a:1,b:4,c:5}\n")])])])]),t._v(" "),e("li",[e("p",[t._v("setState本身合并")]),t._v(" "),e("p",[t._v("多次执行setState，会出现只执行了最后一次的"),e("strong",[t._v("错觉")]),t._v("，但是其实每一次都执行了。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 结果是age从0到1\nclick=()=>{\n    console.log('start!')\n        \n        this.setState({name:'name1',age: this.state.age+1})\n\n        this.setState({name:'name2',age: this.state.age+1})\n\n        this.setState({name:'name3',age: this.state.age+1})\n\n    console.log('end!')\n};\n")])])]),e("p",[t._v("原因："),e("strong",[t._v("setState是异步更新的")]),t._v("。每次setState都会执行，"),e("strong",[t._v("执行之后的值没有立马更新this.state，所以每次在setState里面取到的this.state的值都是最初的值")]),t._v("，造成合并执行最后一条setState的错觉")])]),t._v(" "),e("li",[e("p",[t._v("setState合并累加")]),t._v(" "),e("p",[t._v("当setState"),e("strong",[t._v("传入函数")]),t._v("，函数返回state，则多次setState可以实现多次累加")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("this.setState((preState,props) => {\n\treturn {\n        count:preState.count + 1\n    }\n})\nthis.setState((preState,props) => {\n\treturn {\n        count:preState.count + 1\n    }\n})\n")])])])])]),t._v(" "),e("h2",{attrs:{id:"setstate不可变性的力量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#setstate不可变性的力量"}},[t._v("#")]),t._v(" setState不可变性的力量")]),t._v(" "),e("p",[t._v("不可变性指的是在开发中需要"),e("strong",[t._v("避免直接修改state中的引用类型数据")]),t._v("。否则SCU和PureComponent优化会失效。")]),t._v(" "),e("p",[e("strong",[t._v("原因")]),t._v("：SCU和PureComponent的优化都是浅层比较，对于引用类型的数据而言，就是比较"),e("strong",[t._v("内存地址")]),t._v("。")]),t._v(" "),e("p",[t._v("当直接在原来的数据上修改时，内存地址未发生变化，所以浅层比较会返回false。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('class App extends Component(){\n    constructor(props){\n        super(props){\n            this.state = {\n                // 引用类型数据\n                frineds:[...]\n            }\n        }\n    }\n    \n    ...\n    btnClick(){\n        // 错误做法 friends的内存地址未变化\n        const newData = {"name":"pjx",age:20}\n        this.state.frineds.push(newDate)\n         this.setState({\n        \tfriends:this.state.friends\n         })\n        \n        // 推荐做法 赋值一份原数据\n        const newFriends = [...this.state.friends]\n        newFriends.push({"name":"pjx",age:20})\n        this.setState({\n            friends:newFriends\n        })\n    }\n}\n')])])]),e("h2",{attrs:{id:"scu、purecomponent、memo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scu、purecomponent、memo"}},[t._v("#")]),t._v(" SCU、PureComponent、memo")]),t._v(" "),e("p",[t._v("shouldComponentUpdate生命周期函数用法")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 当jsx依赖的state变化，再执行render函数，否则阻断render\nshouldComponentUpdate(nextProps,nextState,nextContext){\n    if(this.state.count !== nextState.count){\n        return true\n    }\n    return false\n}\n")])])]),e("p",[t._v("PureComponent用法（类组件）")]),t._v(" "),e("p",[t._v("当多个组件中都需要实现SCU会很麻烦，可以让"),e("strong",[t._v("类组件继承自PureComponent")]),t._v("，内部会自动实现SCU。")]),t._v(" "),e("p",[t._v("底层通过"),e("strong",[t._v("shallowEqual")]),t._v("浅层比较对象state和props，判断state和props是否改变")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class App extends PureComponent{\n    ...\n}\n")])])]),e("p",[t._v("memo（函数式组件）")]),t._v(" "),e("p",[t._v("memo是"),e("strong",[t._v("高阶组件（HOC）")]),t._v("，本质是一个函数，传入的参数是一个组件。")]),t._v(" "),e("p",[t._v("底层实现也是"),e("strong",[t._v("shallowEqual")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import {memo} from "react"\n\n// memo包裹函数组件\nconst Header = memo(function Header(){\n    ...\n})\n')])])]),e("h2",{attrs:{id:"高阶组件hoc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高阶组件hoc"}},[t._v("#")]),t._v(" 高阶组件HOC")]),t._v(" "),e("p",[e("strong",[t._v("高阶组件是参数为组件，返回值为新组件的函数")])]),t._v(" "),e("p",[t._v("实际应用："),e("strong",[t._v("memo")]),t._v("、"),e("strong",[t._v("forwardRef")]),t._v("、"),e("strong",[t._v("react-redux中的connect函数")]),t._v("等都是高阶组件")]),t._v(" "),e("p",[t._v("作用：")]),t._v(" "),e("ol",[e("li",[t._v("props增强(主题theme注入)")]),t._v(" "),e("li",[t._v("jsx条件渲染（登录鉴权）")]),t._v(" "),e("li",[t._v("劫持生命周期函数")])]),t._v(" "),e("p",[t._v("缺点：")]),t._v(" "),e("ol",[e("li",[t._v("嵌套复杂")]),t._v(" "),e("li",[t._v("不遵守规则的话，props可能被同名覆盖，数据不一致")])]),t._v(" "),e("h2",{attrs:{id:"react严格模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react严格模式"}},[t._v("#")]),t._v(" React严格模式")]),t._v(" "),e("p",[e("strong",[t._v("StrictMode 是一个用来突出显示应用程序中潜在问题的工具")])]),t._v(" "),e("ul",[e("li",[t._v("与Fragment 一样，StrictMode 不会渲染任何可见的 UI")]),t._v(" "),e("li",[t._v("它为其后代元素触发额外的检查和警告")]),t._v(" "),e("li",[t._v("严格模式检查仅在开发模式下运行，"),e("em",[t._v("它们不会影响生产构建")])])]),t._v(" "),e("p",[e("strong",[t._v("严格检查检查的内容")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("识别不安全的生命周期")])]),t._v(" "),e("li",[e("p",[t._v("使用过时的ref API")])]),t._v(" "),e("li",[e("p",[t._v("检查意外的副作用")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("组件的constructor会被调用两次")])]),t._v(" "),e("li",[t._v("这是严格模式下故意进行的操作，让你来查看在这里写的一些逻辑代码被调用多次时，是否会产生一些副作用")]),t._v(" "),e("li",[t._v("在生产环境中，是不会被调用两次的")])])]),t._v(" "),e("li",[e("p",[t._v("使用废弃的findDOMNode方法")]),t._v(" "),e("ul",[e("li",[t._v("在之前的React API中，可以通过findDOMNode来获取DOM，已不推荐使用")])])]),t._v(" "),e("li",[e("p",[t._v("检测过时的context API")]),t._v(" "),e("ul",[e("li",[t._v("早期的Context是通过static属性声明Context对象属性，通过getChildContext返回Context对象等方式来使用Context的，已不推荐使用")])])])]),t._v(" "),e("h2",{attrs:{id:"redux及中间件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux及中间件"}},[t._v("#")]),t._v(" Redux及中间件")]),t._v(" "),e("p",[t._v("在函数式编程中一个重要的概念叫做"),e("code",[t._v("纯函数")]),t._v("，redux中的"),e("strong",[t._v("reducer")]),t._v("函数就是一个纯函数。")]),t._v(" "),e("p",[e("strong",[t._v("纯函数")]),t._v("特点：")]),t._v(" "),e("ol",[e("li",[t._v("确定的输入，一定产生确定的输出")]),t._v(" "),e("li",[t._v("函数执行中不会产生副作用（如触发事件、DOM更新）")])]),t._v(" "),e("p",[e("strong",[t._v("Redux三大核心概念")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("Store")]),t._v(" "),e("p",[t._v("就是defaultState")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// immutable.js中的Map函数\nconst defaultState = Map({\n\tplayList: [],\n\tcurrentSong: {},\n  currentSongIndex: 0,\n  /**\n   * 播放模式\n   * 0 顺序\n   * 1 随机\n   * 2 单曲循环\n   */\n  playMode:0, \n  lyric:[],\n  currentLyricIndex:0\n});\n")])])])]),t._v(" "),e("li",[e("p",[t._v("Action")]),t._v(" "),e("p",[t._v("redux中的所有数据变化，必须通过派发（dispatch）action来更新。")]),t._v(" "),e("p",[t._v("action是一个"),e("strong",[t._v("JS对象")]),t._v("，对象中包含type和content。")]),t._v(" "),e("p",[t._v("通过dispatch action更新数据的好处是可以通过redux开发者工具跟踪数据变化。")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 改变歌曲列表\nconst changePlayListAction = (playList) => ({\n\ttype: actionTypes.CHANGE_PLAY_LIST,\n\tplayList,\n});\n\n...\n\ndispatch(changePlayListAction(newList));\n")])])])]),t._v(" "),e("li",[e("p",[t._v("Reducer")]),t._v(" "),e("p",[t._v("reducer是一个纯函数，可以将state和action联系在一起。reducer将传入的state和action经过纯函数处理，生成新的state。")]),t._v(" "),e("p",[e("strong",[t._v("每次调用dispatch都会触发reducer函数执行")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const defaultState = Map({\n\tplayList: [],\n\tcurrentSong: {},\n  currentSongIndex: 0,\n  /**\n   * 播放模式\n   * 0 顺序\n   * 1 随机\n   * 2 单曲循环\n   */\n  playMode:0, \n  lyric:[],\n  currentLyricIndex:0\n});\n\nfunction reducer(state = defaultState,action){\n  switch (action.type){\n    case actionTypes.CHANGE_CURRENT_SONG:\n      return state.set("currentSong", action.currentSong);\n    case actionTypes.CHANGE_PLAY_LIST:\n      return state.set("playList",action.playList)\n    case actionTypes.CHANGE_CURRENT_SONG_INDEX:\n      return state.set("currentSongIndex", action.currentSongIndex);\n    case actionTypes.CHANGE_PLAY_MODE:\n      return state.set("playMode",action.playMode)\n    case actionTypes.CHANGE_LYRIC:\n      return state.set("lyric",action.lyric)\n    case actionTypes.CHANGE_CURRENT_LYRIC_INDEX:\n      return state.set("currentLyricIndex", action.currentLyricIndex);\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n')])])]),e("p",[e("strong",[t._v("reducer分模块与合并")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('import { combineReducers } from "redux-immutable";\n\n// 导入各个模块的reducer\nimport recommendReducer from "@/pages/discover/children/recommend/store";\nimport playerReducer from "@/pages/player/store"\n\n// 将各个模块的reducer合并,导出store.state\n// 使用redux-immutable的combineReducers\nconst cReducers = combineReducers({\n\trecommend:recommendReducer,\n\tplayer:playerReducer\n});\n\nexport default cReducers;\n')])])]),e("p",[t._v("combineReducers函数：")]),t._v(" "),e("ol",[e("li",[t._v("事实上，它也是将我们传入的reducers"),e("strong",[t._v("合并到一个对象中")]),t._v("，最终返回一个combination的"),e("strong",[t._v("函数")]),t._v("（相当于我们之前的reducer函")])]),t._v(" "),e("p",[t._v("数了）；")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[t._v("在执行combination函数的过程中，它会通过判断"),e("strong",[t._v("前后返回的数据是否相同")]),t._v("来决定返回之前的state还是新的state；")])]),t._v(" "),e("li",[e("p",[t._v("新的state会"),e("strong",[t._v("触发订阅者")]),t._v("发生对应的刷新，而旧的state可以有效的组织订阅者发生刷新")])])]),t._v(" "),e("h3",{attrs:{id:"react中间件redux-thunk"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react中间件redux-thunk"}},[t._v("#")]),t._v(" React中间件redux-thunk")]),t._v(" "),e("p",[e("strong",[t._v("redux中异步操作--使用redux-thunk中间件")])]),t._v(" "),e("p",[e("strong",[t._v("注意："),e("strong",[t._v("默认情况下redux中只能dispatch一个")]),t._v("action对象")]),t._v("（type和content），但是redux-thunk可以让dispatch一个"),e("strong",[t._v("action函数")]),t._v("，函数会被调用，并且传递给这个函数两个参数："),e("strong",[t._v("dispatch函数和getState函数")]),t._v("。")]),t._v(" "),e("p",[t._v("中间件的目的是在dispatch和action到达reducer之间，扩展自己的代码，比如网络请求。")]),t._v(" "),e("p",[t._v("参数的dispatch函数可以用于再次派发dispatch action，getState函数可以用于获取原来的state。")]),t._v(" "),e("p",[t._v("基本使用")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 启用redux-thunk中间件和redux开发者工具\n\nimport { createStore, compose, applyMiddleware } from "redux";\nimport thunk from "redux-thunk";\nimport reducer from "./reducer";\n\n// 开启浏览器redux调试工具\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// 使用thunk中间件\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n')])])]),e("p",[t._v("eg：")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// id获取歌词\n\n// dispatch的是一个函数，thunk中间件传递了dispatch函数作为参数\nexport const getLyricAction = (id) => {\n\treturn (dispatch) => {\n\t\tgetLyric(id).then((res) => {\n\t\t\tconst lyricString = res.lrc.lyric;\n\t\t\tconst lyric = parseLyric(lyricString);\n\t\t\tdispatch(changeLyricAction(lyric));\n\t\t});\n\t};\n};\n")])])]),e("p",[e("strong",[t._v("基本实现原理")]),t._v("：")]),t._v(" "),e("p",[t._v("当你使用 "),e("code",[t._v("redux-thunk")]),t._v(" 中间件时，它会在 Redux 的 action 被 dispatch 到 reducer 之前"),e("strong",[t._v("拦截 action")]),t._v("。如果 action 是一个函数（即 thunk），"),e("code",[t._v("redux-thunk")]),t._v(" 会执行这个函数，并将 "),e("code",[t._v("dispatch")]),t._v(" 和 "),e("code",[t._v("getState")]),t._v(" 作为参数传递给它")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("patchThunk")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("store")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" next "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" store"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dispach"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dispatchAndThunk")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" action "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("store"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dispatch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("store"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getState"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    store"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dispatch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dispatchAndThunk"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("strong",[t._v("Redux使用流程")])]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://gitee.com/coderPjx/images/raw/master/images/Snipaste_2021-04-27_17-04-45.jpg"}})])]),t._v(" "),e("h2",{attrs:{id:"封装react-redux的connect函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装react-redux的connect函数"}},[t._v("#")]),t._v(" 封装react-redux的connect函数")]),t._v(" "),e("p",[t._v("connect函数的"),e("strong",[t._v("返回值")]),t._v(" 本质是 "),e("strong",[t._v("高阶组件（HOC）")])]),t._v(" "),e("p",[t._v("通过监听store变化，将redux和组件联系起来，减少组件中的重复逻辑")]),t._v(" "),e("p",[t._v("由于使用麻烦，react-readux推出"),e("code",[t._v("useDispatch")]),t._v("和"),e("code",[t._v("useSelector")]),t._v("等hooks")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("import { PureComponent } form 'react'\nimport store from '../store'\n\n// 定义connect函数\nfunction connect(mapStateToProps,mapDispatchToProps){\n    return function(WrapperComponent){\n        class NewComponent extends PureComponent(){\n            constructor(props){\n                super(props)\n                this.state = {\n                    storeState:mapStateToProps(store.getState())\n                }\n            }\n            componentDidMount(){\n                // 订阅store监听数据改变，修改state重新渲染\n                this.unsubscribe = store.subscribe(() => {\n                    this.setState = ({\n                        storeState :mapStateToProps(store.getState())\n                    })\n                })\n            }\n            componentWillUnmount(){\n                // 取消订阅store\n                this.unsubscribe()\n            }\n            render(){\n                const stateObj = this.mapStateToProps(store.getState())\n                const dispatchObj = this.mapDispatchToProps(store.dispatch)\n                return <WrapperComponent {...this.props} {...stateObj} {...dispatchObj}/>\n            }\n        return NewComponent\n        }\n    }\n    \n}\n")])])]),e("p",[t._v("使用")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 定义基础组件\nclass Home extends PureComponent{\n    render(){\n        return (\n        \t<div>\n            \t<h1>Home</h1>\n            \t<button onClick={e => this.props.increment()}>+1</button>\n            </div>\n        )\n    }\n}\n\n// 定义mapStateToPorps和mapDispatchToProps 函数\n\n// state参数是store.getState()\nconst mapStateToPorps = state => ({\n    count:state.count\n})\n// dispatch参数是store.dispatch\nconst mapDispatchToProps = dispatch => ({\n    increment(){\n        dispatch(increment())\n    }\n})\n\t\n// 真正使用的是经过处理的Home组件\nexport default connect(mapStateToPorps,mapDispatchToProps)(Home)\n\n")])])]),e("h2",{attrs:{id:"前端路由的原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端路由的原理"}},[t._v("#")]),t._v(" 前端路由的原理")]),t._v(" "),e("p",[t._v("前端路由可以实现url改变，页面不刷新，但是切换页面显示的内容。")]),t._v(" "),e("p",[t._v("实现页面不刷新，url改变有hash和history两种方法。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("hash模式")]),t._v(" "),e("p",[t._v("通过"),e("code",[t._v("addEventListener")]),t._v("和"),e("code",[t._v("hashchange")]),t._v("事件，对"),e("code",[t._v("location.hash")]),t._v("进行监听，对不同的hash值做不同的页面渲染")])]),t._v(" "),e("li",[e("p",[t._v("history模式")]),t._v(" "),e("p",[t._v("通过html5的新api，pushState，popstate，replaceState，go，forward，back等，通过"),e("code",[t._v("addEventListener")]),t._v("和"),e("code",[t._v("popstate")]),t._v("事件，监听"),e("code",[t._v("location.pathname")]),t._v("，对不同的pathname进行不同的页面渲染")])])]),t._v(" "),e("h2",{attrs:{id:"useeffect模拟生命周期函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useeffect模拟生命周期函数"}},[t._v("#")]),t._v(" useEffect模拟生命周期函数")]),t._v(" "),e("p",[t._v("常用于组件内的effect（具有副作用）事件。例如网络请求、事件订阅和取消。")]),t._v(" "),e("p",[t._v("参数1：回调函数。回调函数中可以模拟事件订阅（"),e("strong",[t._v("componentDidMount")]),t._v("），回调函数返回值可以为一个函数，用于"),e("strong",[t._v("清除effect")]),t._v("，取消事件订阅("),e("strong",[t._v("componentWillUnmount")]),t._v(")")]),t._v(" "),e("p",[t._v("参数2：依赖项数组。页面的渲染依赖这个数据项，当依赖项数组的数据发生变化，才执行回调函数并重新渲染。（"),e("strong",[t._v("componentShoudUpdate")]),t._v("）")]),t._v(" "),e("p",[e("strong",[t._v("注意：")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("默认情况下，如果不传递第二个参数（undefined），useEffect的回调函数会在"),e("strong",[t._v("每次渲染时都重新执行")])])]),t._v(" "),e("li",[e("p",[t._v("但是，如果一个函数我们不希望依赖任何的内容时，也可以传入一个"),e("strong",[t._v("空的数组 []")])]),t._v(" "),e("p",[t._v("此时两个回调函数（传入的回调函数和返回的函数）分别对应的就是"),e("strong",[t._v("componentDidMount")]),t._v("和"),e("strong",[t._v("componentWillUnmount")]),t._v("生命周期函数")])])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('useEffect = (() => {\n    ...\n    console.log("订阅事件")\n    \n    return () => {\n        ...\n        console.log("取消订阅事件")\n    }\n},[dependency])\n')])])]),e("h2",{attrs:{id:"usememo和usecallback的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usememo和usecallback的区别"}},[t._v("#")]),t._v(" useMemo和useCallback的区别")]),t._v(" "),e("p",[t._v("两个hook函数的作用都是"),e("strong",[t._v("性能优化")]),t._v("，useCallback是对函数做优化，useMemo是对返回结果做优化")]),t._v(" "),e("p",[e("strong",[t._v("useMemo")])]),t._v(" "),e("p",[t._v("使用场景：")]),t._v(" "),e("ol",[e("li",[t._v("复杂计算缓存")]),t._v(" "),e("li",[t._v("父组件传递子组件"),e("strong",[t._v("引用类型值")]),t._v("缓存")])]),t._v(" "),e("p",[t._v("用于"),e("strong",[t._v("缓存返回值")]),t._v("，第一个参数为要缓存的函数（注意实际被缓存的是函数被执行过后的值），第二个参数为依赖项数组，如果依赖发生了变化，那么就会重新执行这个函数，得到新的返回值；否则当组件重新渲染时，不会重新执行这个函数，而是直接取被缓存的该函数的返回值。")]),t._v(" "),e("p",[t._v("复杂计算缓存")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 求和函数\nfunction sum(count){\n  console.log("重新计算")\n  let total = 0;\n  for(let i = 1;i <= count ;i++) {\n    total += i;\n  }\n  return total;\n}\nexport default function App() {\n  console.log("App渲染")\n  const [count, setcount] = useState(0)\n  const [show, setshow] = useState(true)\n\n  // 当count变化时，才重新执行求和函数。\n  const total = useMemo(() => {\n    return sum(count)\n  },[count])\n\n  return (\n    <div>\n      <h2>当前计数：{total}</h2>\n      <button onClick={e => setcount(count + 1)}>+1</button>\n      <button onClick={e => setshow(!show)}>切换</button>\n    </div>\n  )\n')])])]),e("p",[t._v("引用值传递缓存")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('const MyInfo = memo((props) => {\n\tconsole.log("MyInfo组件重新渲染");\n\treturn (\n\t\t<h2>\n\t\t\t姓名：{props.info.name} 年龄：{props.info.age}\n\t\t</h2>\n\t);\n});\n\nexport default function App() {\n\tconsole.log("App重新渲染");\n\tconst [show, setshow] = useState(true);\n\n    // 缓存引用值\n\tconst info = useMemo(() => {\n\t\treturn { name: "pjx", age: 20 };\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<MyInfo info={info} />\n\t\t\t<button onClick={(e) => setshow(!show)}>切换</button>\n\t\t</div>\n\t);\n')])])]),e("p",[e("strong",[t._v("useCallback")])]),t._v(" "),e("p",[e("strong",[t._v("使用场景：在将组件中的一个函数，传递给子组件进行回调使用时，使用useCallback进行优化")])]),t._v(" "),e("p",[t._v("用于"),e("strong",[t._v("缓存函数")]),t._v("，第一个参数为要缓存的函数，第二个参数为依赖项数组，如果依赖发生了变化，那么就会生成一个新的函数；否则当组件重新渲染时，不会重新定义这个函数，而是会取缓存。")]),t._v(" "),e("p",[e("strong",[t._v("使用useCallback的目的是不希望子组件进行多次渲染，并不是为了函数进行缓存")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('// 自定义MyButton组件\nconst MyButton = memo((props) => {\n\tconsole.log("MyButton" + props.title + "子组件渲染");\n\treturn <button onClick={props.increment}>MyButton +1</button>;\n});\n\n/**\n * 当点击切换改变show,子组件会跟随父组件会重新渲染。\n */\nexport default function App() {\n\tconsole.log("App父组件渲染");\n\tconst [count, setcount] = useState(0);\n\tconst [show, setshow] = useState(true);\n\n\t/**\n\t * 按钮1 未使用useCallBack 不会进行性能优化。\n   * 当父子间state改变，子组件没改变，会进行不必要的重新渲染，浪费性能。\n\t */\n\n\tconst increment1 = () => {\n\t\tconsole.log("按钮1点击");\n\t\tsetcount(count + 1);\n  };\n  \n  /**\n   * 按钮2 使用useCallBack 会进行性能优化。\n   * 当父组件state改变，子组件没改变，不会进行不必要的重新渲染。\n   */\n\tconst increment2 = useCallback(() => {\n\t\tconsole.log("按钮2点击");\n\t\tsetcount(count + 1);\n\t}, [count]);\n\treturn (\n\t\t<div>\n\t\t\t<h2>当前计数：{count}</h2>\n\t\t\t<MyButton title={1} increment={increment1} />\n\t\t\t<MyButton title={2} increment={increment2} />\n\t\t\t<button onClick={(e) => setshow(!show)}>切换</button>\n\t\t</div>\n\t);\n')])])]),e("p",[e("strong",[t._v("注意")]),t._v("：以下写法useCallback和useMemo作用一样")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("useCallback(fn,[])\nuseMemo(() => fn,[])\n")])])]),e("h2",{attrs:{id:"usestate和usereducer的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usestate和usereducer的区别"}},[t._v("#")]),t._v(" useState和useReducer的区别")]),t._v(" "),e("p",[t._v("useState用于组件内部的简易state。")]),t._v(" "),e("p",[t._v("useReducer和redux中的reducer无关。useRuducer用于组件内的复杂state。")]),t._v(" "),e("h2",{attrs:{id:"useeffect和uselayouteffect的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useeffect和uselayouteffect的区别"}},[t._v("#")]),t._v(" useEffect和useLayoutEffect的区别")]),t._v(" "),e("p",[t._v("useEffect在"),e("strong",[t._v("DOM更新之后执行，不会阻塞DOM的更新")]),t._v("。")]),t._v(" "),e("p",[t._v("useLayoutEffect在"),e("strong",[t._v("DOM更新之前执行，会阻塞DOM的更新")]),t._v("。")]),t._v(" "),e("p",[t._v("如果希望某事件发生后，再更新DOM，需要使用useLayoutEffect")]),t._v(" "),e("h2",{attrs:{id:"useimperativehandle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#useimperativehandle"}},[t._v("#")]),t._v(" "),e("strong",[t._v("useImperativeHandle")])]),t._v(" "),e("p",[t._v("父组件通过forwardRef可以将ref转发到子组件，子组件拿到父组件中创建的ref，绑定到自己的某一个元素中。")]),t._v(" "),e("p",[t._v("这样就实现了"),e("strong",[t._v("ref的转发")]),t._v("，父组件可以通过ref直接调用子组件的方法。")]),t._v(" "),e("p",[e("strong",[t._v("forwardRef的做法本身没有什么问题，但是我们是将子组件的DOM直接暴露给了父组件存在问题")])]),t._v(" "),e("ul",[e("li",[e("p",[t._v("直接暴露给父组件带来的问题是某些情况的"),e("strong",[t._v("不可控")])])]),t._v(" "),e("li",[e("p",[t._v("父组件可以拿到DOM后进行任意的操作")])])]),t._v(" "),e("p",[t._v("例如我们只是希望父组件可以操作子组件input的focus，其他并不希望它随意操作")]),t._v(" "),e("p",[e("strong",[t._v("通过useImperativeHandle可以只暴露固定的操作")])]),t._v(" "),e("p",[t._v("通过useImperativeHandle的Hook，将传入的ref和useImperativeHandle"),e("strong",[t._v("第二个参数返回的对象绑定到了一起")]),t._v("，所以在父组件中，使用 inputRef.current时，实际上使用的是返回第二个参数的对象")]),t._v(" "),e("p",[t._v("比如我调用了 focus函数，甚至可以调用 printHello函数")]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const MyInput = forwardRef(function(props,ref) {\n    const inputRef = useRef();\n    // 第二个参数返回的对象就是父组件可以进行调用的操作\n    useImperativeHandle(ref,() => {\n        focus() {\n            inputRef.current.focus();\n        }\n\t\tprintHello() {\n            console.log('Hello')\n        }\n    })\n    \n    return <input ref={inptRef} type=\"text\" />\n})\n")])])]),e("h2",{attrs:{id:"usedispatch、useselector、shallowequal"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#usedispatch、useselector、shallowequal"}},[t._v("#")]),t._v(" useDispatch、useSelector、shallowEqual")]),t._v(" "),e("p",[e("strong",[t._v("在Redux7.1开始，提供了Hook的方式，我们再也不需要编写connect以及对应的映射函数")])]),t._v(" "),e("p",[t._v("useDispatch直接返回dispatch函数实例。")]),t._v(" "),e("p",[t._v("useSelector返回state中的对象。")]),t._v(" "),e("p",[t._v("参数1：返回state对象的函数")]),t._v(" "),e("p",[t._v("参数2：是否进行浅层比较"),e("code",[t._v("shallowEqual")])]),t._v(" "),e("p",[e("strong",[t._v("注意")]),t._v("：当使用useSelector时，可以通过传入第二个参数shallowEqual进行性能优化。")]),t._v(" "),e("p",[e("strong",[t._v("useSelector默认的比较是"),e("code",[t._v("===")]),t._v("比较，所以当state变化，无论页面是否使用（依赖）state，总是会重新渲染。")])]),t._v(" "),e("div",{staticClass:"language-react extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const dispatch = useDispatch()\nconst { topBanners } = useSelector(state => ({\n    topBanners: state.recommend.topBanners\n}),shallowEqual) \n\nuseEffect(() => {\n    dispatch(getTopBannersAction())\n},[dispatch])\n")])])]),e("h2",{attrs:{id:"redux-toolkit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redux-toolkit"}},[t._v("#")]),t._v(" redux-toolkit")]),t._v(" "),e("p",[t._v("优点：")]),t._v(" "),e("ol",[e("li",[e("p",[e("strong",[t._v("简化的语法")]),t._v("：提供了"),e("code",[t._v("createSlice")]),t._v("和"),e("code",[t._v("createReducer")]),t._v("等工具函数，内部会"),e("strong",[t._v("自动生成对应的reducer和action")]),t._v("，减少了编写Redux reducer和action creator时的样板代码量，使代码更加简洁和易于理解")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("内置Immerjs支持")]),t._v("：集成了Immerjs库，简化了在reducer中进行状态更新的过程。开发者可以直接修改状态（修改state）而无需手动编写"),e("strong",[t._v("不可变性")]),t._v("逻辑（"),e("strong",[t._v("无需浅拷贝")]),t._v("），从而减少了出错的可能性并提高了代码的可读性")]),t._v(" "),e("p",[t._v("了解immerjs：https://mp.weixin.qq.com/s/hfeCDCcodBCGS5GpedxCGg")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("默认集成Redux Thunk")]),t._v("：自带了"),e("strong",[t._v("Redux Thunk")]),t._v("中间件，"),e("strong",[t._v("createAsyncThunk")]),t._v("允许开发者编写简单直观的异步逻辑，无需额外安装或配置中间件")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("创建标准化的redux store")]),t._v("：通过"),e("code",[t._v("configureStore")]),t._v("函数可以轻松地创建一个包含预定义中间件和增强器的Redux store，并且还能够自动进行性能优化。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("更好的性能")]),t._v("：Redux Toolkit内部对性能进行了优化，使用了memoization技术来提高重渲染的效率。这意味着在某些情况下，Redux Toolkit可能比传统的React-Redux具有更好的性能表现。")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("官方推荐")]),t._v("：Redux Toolkit是由Redux官方团队推出的工具包，因此可以获得更好的支持和文档，以及与Redux生态系统的更好集成")])])]),t._v(" "),e("p",[e("strong",[t._v("Redux Toolkit的核心API")])]),t._v(" "),e("ul",[e("li",[t._v("configureStore：包装createStore以提供简化的配置选项和良好的默认值。它可以自动组合你的 slice reducer，添加你提供")])]),t._v(" "),e("p",[t._v("​\t的任何 Redux 中间件，"),e("strong",[t._v("redux-thunk")]),t._v("默认包含，并启用 Redux DevTools Extension。")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("createSlice：接受reducer函数的对象、切片名称和初始状态值，"),e("strong",[t._v("返回值中包含自动生成切片reducer和相应的actions")]),t._v("。")])]),t._v(" "),e("li",[e("p",[t._v("createAsyncThunk: 接受一个动作类型字符串和一个返回"),e("strong",[t._v("Promise")]),t._v("的函数，并生成一个"),e("strong",[t._v("pending/fulfilled/rejected")]),t._v("基于该Promise分")])])]),t._v(" "),e("p",[t._v("​\t派动作类型的 thunk")]),t._v(" "),e("p",[e("strong",[t._v("createSlice")]),t._v("使用")]),t._v(" "),e("p",[t._v("createSlice返回值为对象，包含自动生成的所有的actions和reducer")]),t._v(" "),e("p",[t._v("主要参数：")]),t._v(" "),e("ul",[e("li",[t._v("name：用户标记slice的名词")])]),t._v(" "),e("p",[t._v("​\t在之后的redux-devtool中会显示对应的名词；")]),t._v(" "),e("ul",[e("li",[t._v("initialState：初始化值")])]),t._v(" "),e("p",[t._v("​\t第一次初始化时的值；")]),t._v(" "),e("ul",[e("li",[t._v("reducers：相当于redux的"),e("strong",[t._v("reducer函数")])]),t._v(" "),e("li",[t._v("对象类型，并且可以添加很多的函数；")]),t._v(" "),e("li",[e("strong",[t._v("每一个函数类似于redux的reducer函数中的一个case语句")]),t._v("；")]),t._v(" "),e("li",[t._v("函数的参数：state和调用这个action时，传递的action参数")]),t._v(" "),e("li",[t._v("extraReducers：监听异步Promise的状态"),e("strong",[t._v("pending/fulfilled/rejected")]),t._v("，进行对应的操作")])]),t._v(" "),e("p",[e("strong",[t._v("createAsyncThunk")]),t._v("使用")]),t._v(" "),e("p",[t._v("主要参数：")]),t._v(" "),e("ul",[e("li",[t._v("name：用于标记thunk的名词")]),t._v(" "),e("li",[t._v("异步函数：参数包括额外自定义的参数和dispatch、getState")])]),t._v(" "),e("p",[t._v("异步操作的结果处理：")]),t._v(" "),e("ul",[e("li",[t._v("方式1：extraReducers监听Promise状态")]),t._v(" "),e("li",[t._v("方式2：异步函数中传递了dispatch、getState，异步请求返回结果后直接处理")])]),t._v(" "),e("p",[e("strong",[t._v("RTK基本使用")])]),t._v(" "),e("p",[t._v("1.安装 @reduxjs/toolkit 和 react-redux")]),t._v(" "),e("p",[t._v("store/index.js 定义store")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" configureStore "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@reduxjs/toolkit"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureStore")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("reducer")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        xxx：xxx\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" store\n")])])]),e("p",[t._v("2.index.js 入口文件中引入store ，并通过Provider组件传入store")]),t._v(" "),e("div",{staticClass:"language-jsx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" Provider "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'react-redux'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" store "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./store'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Provider")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("store")]),e("span",{pre:!0,attrs:{class:"token script language-javascript"}},[e("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("store"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ...\n")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Provider")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("3.分模块定义reducer")]),t._v(" "),e("p",[t._v("home.js")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createSlice "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@reduxjs/toolkit'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// createAsyncThunk异步操作")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fetchHomeDataAction "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAsyncThunk")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fetchGoodPrice"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHomeGoodPriceData")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" homeSlice "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createSlice")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'home'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("initialState")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("count")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("reducers")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 每一个函数类似于redux的reducer函数中的一个case语句")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RTK内部会自动生成对应的actions")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 经过RTK优化（Immer库）可以直接在state上做修改，不需要做浅拷贝")]),t._v("\n            state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("subtract")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("count "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以在createSlice的entraReducer中监听异步操作结果")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("extraReducers")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("builder")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    builder\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetchHomeDataAction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pending"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetchHomeDataAction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fulfilled"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" payload "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("goodPriceInfo "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("addCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetchHomeDataAction"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rejected"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" error "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("error "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" error"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// createSlice返回值中包含自动生成切片reducer和相应的actions")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" add "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" homeSlice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("actions\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" homeSlice"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reducer\n")])])]),e("p",[t._v("4.在store/index.js中引用定义的reducer模块")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" homeReducer "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./modules/home'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" store "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("configureStore")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("reducer")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        home：homeReducer\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=a.exports}}]);