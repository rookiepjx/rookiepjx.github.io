(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{281:function(t,v,_){"use strict";_.r(v);var s=_(14),a=Object(s.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"osi七层模型和tcp-ip五层模型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#osi七层模型和tcp-ip五层模型"}},[t._v("#")]),t._v(" OSI七层模型和TCP/IP五层模型")]),t._v(" "),v("p",[t._v("OSI模型")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("层级")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("功能")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("常用协议")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("应用层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("信息语法语义，数据加密，格式转换，压缩解压")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("HTTP,HTTPS,FTP,SMTP,POP3,DNS,TELNET,SSH...")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("表示层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("各种应用程序协议，如文件传输，电子邮件，文件服务，虚拟终端")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("JPEG,ASCII")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("会话层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("不同机器间的用户建立和管理会话")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("SSL,TLS")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("传输层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("提供端对端的数据传输接口")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("TCP,UDP")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("网络层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("控制子网运行，如逻辑编址，分组传输，路由选择")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("IP,RIP,BGP,ICMP")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("链路层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("物理寻址，传输带有地址的帧")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("MAC,ARP,RARP")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("物理层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("以二进制数据形式在物理媒体上传输数据")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("IEEE802,ISO")])])])]),t._v(" "),v("p",[t._v("TCP/IP模型")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",{staticStyle:{"text-align":"center"}},[t._v("层级")]),t._v(" "),v("th",{staticStyle:{"text-align":"center"}},[t._v("网络设备")])])]),t._v(" "),v("tbody",[v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("应用层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}})]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("传输层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("网关")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("网络层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("路由器")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("链路层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("网桥，交换机")])]),t._v(" "),v("tr",[v("td",{staticStyle:{"text-align":"center"}},[t._v("物理层")]),t._v(" "),v("td",{staticStyle:{"text-align":"center"}},[t._v("网卡，网线，集线器，中继器，调制解调器")])])])]),t._v(" "),v("h2",{attrs:{id:"http1-0、1-1、2-0"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http1-0、1-1、2-0"}},[t._v("#")]),t._v(" Http1.0、1.1、2.0")]),t._v(" "),v("p",[t._v("1.0和1.1")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("1.0")]),t._v(" "),v("th",[t._v("1.1")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("连接类型")]),t._v(" "),v("td",[t._v("短连接")]),t._v(" "),v("td",[t._v("长连接")])]),t._v(" "),v("tr",[v("td",[t._v("缓存响应头")]),t._v(" "),v("td",[t._v("expire、If-Modified-Since")]),t._v(" "),v("td",[t._v("cache-control、Last-Modified、ETag、If-Unmodified-Since, If-Match, If-None-Match")])]),t._v(" "),v("tr",[v("td",[t._v("请求方法")]),t._v(" "),v("td",[t._v("get、post")]),t._v(" "),v("td",[t._v("新增put、delete、head、options、trace、connect")])]),t._v(" "),v("tr",[v("td",[t._v("带宽优化")]),t._v(" "),v("td",[t._v("只能返回整个对象、不支持断点续传")]),t._v(" "),v("td",[t._v("range请求头可以返回部分对象、支持断点续传")])]),t._v(" "),v("tr",[v("td",[t._v("错误通知管理")]),t._v(" "),v("td"),t._v(" "),v("td",[t._v("新增24个错误状态响应码")])]),t._v(" "),v("tr",[v("td",[t._v("host头处理")]),t._v(" "),v("td",[t._v("url不传递主机名")]),t._v(" "),v("td",[t._v("支持host头")])])])]),t._v(" "),v("p",[t._v("1.1和2.0")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("1.1")]),t._v(" "),v("th",[t._v("2.0")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("二进制传输")]),t._v(" "),v("td",[t._v("否，文本传输")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("多路复用")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("头部压缩")]),t._v(" "),v("td",[t._v("否")]),t._v(" "),v("td",[t._v("是")])]),t._v(" "),v("tr",[v("td",[t._v("服务端推送")]),t._v(" "),v("td",[t._v("不支持")]),t._v(" "),v("td",[t._v("支持")])])])]),t._v(" "),v("h2",{attrs:{id:"http和https"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http和https"}},[t._v("#")]),t._v(" Http和Https")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("基本概念")])])]),t._v(" "),v("p",[v("strong",[t._v("http")])]),t._v(" "),v("p",[t._v("(HyperText Transfer Protocol，超文本传输协议）互联网上应用最广泛的网络传输协议。")]),t._v(" "),v("p",[v("strong",[t._v("https")])]),t._v(" "),v("p",[t._v("http的安全版本，加入了ssl(secure socket lay,安全套接层)。作用是建立一个安全的信息传输通道，保证数据传输的安全，确保网站的真实性。")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("区别")])])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("http")]),t._v(" "),v("th",[t._v("https")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("安全性")]),t._v(" "),v("td",[t._v("明文传输，未加密")]),t._v(" "),v("td",[t._v("ssl加密传输")])]),t._v(" "),v("tr",[v("td",[t._v("端口号")]),t._v(" "),v("td",[t._v("80")]),t._v(" "),v("td",[t._v("443")])]),t._v(" "),v("tr",[v("td",[t._v("复杂度")]),t._v(" "),v("td",[t._v("无状态连接;简单")]),t._v(" "),v("td",[t._v("加密传输;身份认证;复杂")])]),t._v(" "),v("tr",[v("td",[t._v("优点")]),t._v(" "),v("td",[t._v("连接简单;速度快")]),t._v(" "),v("td",[t._v("安全")])]),t._v(" "),v("tr",[v("td",[t._v("缺点")]),t._v(" "),v("td",[t._v("不安全")]),t._v(" "),v("td",[t._v("CA证书费用高;连接速度慢费时;增加数据开销")])])])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("https工作原理")])])]),t._v(" "),v("ol",[v("li",[t._v("首先客户端通过https的URL访问服务器建立SSL连接。")]),t._v(" "),v("li",[t._v("服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端。")]),t._v(" "),v("li",[t._v("客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级。")]),t._v(" "),v("li",[t._v("客户端的浏览器根据双方同意的安全等级，"),v("strong",[t._v("建立会话密钥，然后利用网站的公钥将会话密钥加密")]),t._v("，并传送给网站。")]),t._v(" "),v("li",[t._v("服务器利用自己的"),v("strong",[t._v("私钥解密出会话密钥")]),t._v("。")]),t._v(" "),v("li",[t._v("服务器"),v("strong",[t._v("利用会话密钥加密与客户端之间的通信")]),t._v("。")])]),t._v(" "),v("h2",{attrs:{id:"websocket"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://gitee.com/coderPjx/images/raw/master/images/Snipaste_2020-12-28_15-42-04.jpg",alt:""}})]),t._v(" "),v("ul",[v("li",[t._v("基本概念")])]),t._v(" "),v("p",[t._v("webSocket是一个基于TCP实现的"),v("strong",[t._v("全双工")]),t._v("网络协议。在前端中"),v("strong",[t._v("HTML5")]),t._v("已经实现了。")]),t._v(" "),v("p",[t._v("其最大的特点就是"),v("strong",[t._v("全双工")]),t._v("：服务器可以主动向客户端推送消息，客户端也可以主动向服务端发送消息，是真正的双向平等对话，属于"),v("strong",[t._v("服务器推送技术")]),t._v("的一种。")]),t._v(" "),v("p",[t._v("其他服务器推送技术：")]),t._v(" "),v("ol",[v("li",[v("p",[t._v("传统轮询")]),t._v(" "),v("META",{attrs:{"HTTP-RQUIV":"Refresh",CONTENT:"12"}},[v("p",[t._v("http头告诉浏览器每12s刷新一次")])])],1),t._v(" "),v("li",[v("p",[t._v("Ajax轮询")]),t._v(" "),v("p",[t._v("每间隔一段时间，ajax请求后端查询是否发生改变")])]),t._v(" "),v("li",[v("p",[t._v("comet长连接")])]),t._v(" "),v("li",[v("p",[t._v("flash xml socket")])]),t._v(" "),v("li",[v("p",[t._v("java applet")])])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("websocket对象api")]),t._v(" "),v("ul",[v("li",[t._v("构造函数  var ws = new WebSocket('ws://localhost:8080')")]),t._v(" "),v("li",[t._v("onopen  连接建立回调")]),t._v(" "),v("li",[t._v("onmessage  客户端收到消息回调")]),t._v(" "),v("li",[t._v("onclose  连接关闭回调")]),t._v(" "),v("li",[t._v("onerror  连接错误回调")]),t._v(" "),v("li",[t._v("send  发送消息")]),t._v(" "),v("li",[t._v("close  关闭连接")])])]),t._v(" "),v("li",[v("p",[t._v("客户端简单示例")]),t._v(" "),v("div",{staticClass:"language-javascript extra-class"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建websocket连接对象")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ws "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wss://echo.websocket.org"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接建立触发回调")]),t._v("\nws"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onopen")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n  console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Connection open ..."')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接对象发送消息")]),t._v("\n  ws"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello WebSockets!"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 客户端收到信息触发回调")]),t._v("\nws"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Received Message: "')]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" evt"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  ws"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接关闭触发回调")]),t._v("\nws"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onclose")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("evt")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Connection closed."')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      \n")])])])])]),t._v(" "),v("h2",{attrs:{id:"tcp三次握手四次挥手"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手四次挥手"}},[t._v("#")]),t._v(" TCP三次握手四次挥手")]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("三次握手")])])]),t._v(" "),v("p",[t._v("总结：因为客户端和服务器都需要直到"),v("strong",[t._v("各自可收发")]),t._v("，所以需要三次握手")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/rookiepjx/image-bed/img/Snipaste_2020-08-10_15-46-54.jpg",alt:""}})]),t._v(" "),v("ol",[v("li",[t._v("第一次握手，s可以确认收到c发送的报文（s可收）")]),t._v(" "),v("li",[t._v("第二次握手，c可以确认s收到了自己发送的报文，并确认自己可以收到s发送的报文（c可收发）")]),t._v(" "),v("li",[t._v("第三次握手，s可以确认c收到了自己发送的报文（s可发）")])]),t._v(" "),v("p",[v("strong",[t._v("为什么需要三次握手，不是两次")])]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("防止重复连接")]),t._v("：如果之前的连接请求在网络中延迟了，并且在连接建立后再次到达服务器，三次握手可以确保不会因此建立多余的连接。")]),t._v(" "),v("li",[v("strong",[t._v("确保双方都准备好")]),t._v("：三次握手确保了客户端和服务器都能够接收和发送数据，从而可以开始可靠的数据传输。如果两次，服务端无法确认自己发送的包客户端能否接受到。")])]),t._v(" "),v("blockquote",[v("p",[v("strong",[t._v("四次挥手")])])]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/rookiepjx/image-bed/img/Snipaste_2020-08-10_16-11-31.jpg",alt:""}})]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("结束（FIN）")]),t._v("：当客户端完成数据传输并准备关闭连接时，它会发送一个带有FIN标志位的TCP段给服务器，请求关闭连接。")]),t._v(" "),v("li",[v("strong",[t._v("结束确认（ACK）")]),t._v("：服务器收到FIN后，发送一个ACK段作为响应，表示已经收到了关闭请求。")]),t._v(" "),v("li",[v("strong",[t._v("结束（FIN）")]),t._v("：服务器在完成数据传输后，也会发送一个带有FIN标志位的TCP段给客户端，请求关闭它的连接端。")]),t._v(" "),v("li",[v("strong",[t._v("结束确认（ACK）")]),t._v("：客户端收到服务器的FIN后，发送一个ACK段作为最终响应，表示连接可以关闭。")])]),t._v(" "),v("p",[v("strong",[t._v("为什么需要四次挥手？")])]),t._v(" "),v("p",[t._v("总结：需要把所有数据发完，才能确认释放连接。所以第二次握手先发一个ack告诉客户端收到释放请求。所有数据发完，第三次握手再发FIN释放。")]),t._v(" "),v("ul",[v("li",[v("strong",[t._v("全双工通信")]),t._v("：TCP连接是全双工的，这意味着数据可以在两个方向上独立传输。因此，每个方向上的连接都需要单独关闭。")]),t._v(" "),v("li",[v("strong",[t._v("确保数据传输完成")]),t._v("：四次挥手确保双方都有机会发送完剩余的数据，并确认对方已经接收到所有数据。")]),t._v(" "),v("li",[v("strong",[t._v("有序关闭")]),t._v("：通过四次挥手，TCP确保连接可以有序地关闭，避免数据丢失或错误。")])]),t._v(" "),v("h2",{attrs:{id:"tcp和udp"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp和udp"}},[t._v("#")]),t._v(" TCP和UDP")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("TCP")]),t._v(" "),v("th",[t._v("UDP")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("面向连接")]),t._v(" "),v("td",[t._v("面向连接")]),t._v(" "),v("td",[t._v("无连接，发送数据前不需要建立连接")])]),t._v(" "),v("tr",[v("td",[t._v("可靠性")]),t._v(" "),v("td",[t._v("可靠。无差错，不丢失，不重复，按序到达。流量控制、拥塞控制")]),t._v(" "),v("td",[t._v("不保证可靠交付")])]),t._v(" "),v("tr",[v("td",[t._v("传输单位")]),t._v(" "),v("td",[t._v("面向字节流")]),t._v(" "),v("td",[t._v("面向报文")])]),t._v(" "),v("tr",[v("td",[t._v("连接数")]),t._v(" "),v("td",[t._v("1对1")]),t._v(" "),v("td",[t._v("1对1和1对多")])]),t._v(" "),v("tr",[v("td",[t._v("首部大小")]),t._v(" "),v("td",[t._v("20字节")]),t._v(" "),v("td",[t._v("8字节")])])])]),t._v(" "),v("p",[v("strong",[t._v("视频通话使用UDP")]),t._v("的原因： 没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些"),v("strong",[t._v("实时性")]),t._v("要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。")]),t._v(" "),v("h2",{attrs:{id:"tcp的可靠交付"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp的可靠交付"}},[t._v("#")]),t._v(" TCP的可靠交付")]),t._v(" "),v("p",[t._v("可靠交付基于ARQ协议和滑动窗口协议。")]),t._v(" "),v("p",[v("strong",[t._v("ARQ 协议")]),t._v("指的是自动重传请求，它通过超时和重传来保证数据的可靠交付，它是 TCP 协议实现可靠数据传输的一个很重要的 机制。")]),t._v(" "),v("ol",[v("li",[t._v("滑动窗口协议")])]),t._v(" "),v("p",[t._v("使用滑动窗口协议，在发送方维持了一个发送窗口，发送窗口以前的分组是已经发送并确认了的分组，发送窗口中包含了已经发 送但未确认的分组和允许发送但还未发送的分组，发送窗口以后的分组是缓存中还不允许发送的分组。当发送方向接收方发送分 组时，会依次发送窗口内的所有分组，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的分组。如果在定时器的时间内收到某一个分组的确认回答，则滑动窗口，将窗口的首部移动到确认分组的后一个位置，此时如果还有已发送但没 有确认的分组，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送但还未收到确认的分 组。")]),t._v(" "),v("p",[t._v("接收方使用的是"),v("strong",[t._v("累计确认")]),t._v("的机制，对于所有按序到达的分组，接收方返回一个分组的肯定回答。如果收到了一个乱序的分组，那 么接方会直接丢弃，并返回一个最近的按序到达的分组的肯定回答。使用累计确认保证了确认号以前的分组都已经按序到达了， 所以发送窗口可以移动到已确认分组的后面。")]),t._v(" "),v("p",[t._v("滑动窗口协议的缺点是因为使用了累计确认的机制，如果出现了只是窗口中的第一个分组丢失，而后面的分组都按序到达的情况 的话，那么滑动窗口协议会重新发送所有的分组，这样就造成了大量不必要分组的丢弃和重传。")]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[t._v("选择重传协议")])]),t._v(" "),v("p",[t._v("因为滑动窗口使用累计确认的方式，所以会造成很多不必要分组的重传。使用选择重传协议可以解决这个问题。")]),t._v(" "),v("p",[t._v("选择重传协议在发送方维护了一个发送窗口。发送窗口的以前是已经发送并确认的分组，窗口内包含了已发送但未被确认的分组， 已确认的乱序分组，和允许发送但还未发送的分组，发送窗口以后的是缓存中还不允许发送的分组。选择重传协议与滑动窗口协 议最大的不同是，发送方发送分组时，为一个分组都创建了一个定时器。当发送方接受到一个分组的确认应答后，取消该分组的 定时器，并判断接受该分组后，是否存在由窗口首部为首的连续的确认分组，如果有则向后移动窗口的位置，如果没有则将该分 组标识为已接收的乱序分组。当某一个分组定时器到时后，则重新传递这个分组。")]),t._v(" "),v("p",[t._v("在接收方，它会确认每一个正确接收的分组，不管这个分组是按序的还是乱序的，乱序的分组将被缓存下来，直到所有的乱序分 组都到达形成一个有序序列后，再将这一段分组交付给上层。对于不能被正确接收的分组，接收方直接忽略该分组。")]),t._v(" "),v("h2",{attrs:{id:"tcp的流量控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp的流量控制"}},[t._v("#")]),t._v(" TCP的流量控制")]),t._v(" "),v("p",[t._v("TCP 提供了流量控制的服务，这个服务的主要目的是"),v("strong",[t._v("控制发送方的发送速率")]),t._v("，保证接收方来得及接收。因为一旦发送的速率大 于接收方所能接收的速率，就会造成报文段的丢失。接收方主要是通过接收窗口来告诉发送方自己所能接收的大小，"),v("strong",[t._v("发送方根据接收方的接收窗口的大小来调整发送窗口的大小，以此来达到控制发送速率的目的。")])]),t._v(" "),v("h2",{attrs:{id:"tcp的拥塞控制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tcp的拥塞控制"}},[t._v("#")]),t._v(" TCP的拥塞控制")]),t._v(" "),v("p",[t._v("TCP 的拥塞控制主要是根据网络中的拥塞情况来控制发送方数据的发送速率，如果网络处于拥塞的状态，发送方就"),v("strong",[t._v("减小发送的速率")]),t._v("，这样一方面是为了避免继续增加网络中的拥塞程度，另一方面也是为了避免网络拥塞可能造成的报文段丢失。")]),t._v(" "),v("p",[t._v("TCP 的拥塞控制主要使用了四个机制，分别是慢启动、拥塞避免、快速重传和快速恢复。")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("慢启动")]),t._v("的基本思想是，因为在发送方刚开始发送数据的时候，并不知道网络中的拥塞程度，所以先以较低的速率发送，进行试探 ，每次收到一个确认报文，就将发动窗口的长度加一，这样每个 RTT 时间后，发送窗口的长度就会加倍。当发送窗口的大小达 到一个阈值的时候就进入拥塞避免算法。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("拥塞避免")]),t._v("算法是为了避免可能发生的拥塞，将发送窗口的大小由每过一个 RTT 增长一倍，变为每过一个 RTT ，长度只加一。 这样将窗口的增长速率由指数增长，变为加法线性增长。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("快速重传")]),t._v("指的是，当发送方收到三个冗余的确认应答时，因为 TCP 使用的是累计确认的机制，所以很有可能是发生了报文段的 丢失，因此采用立即重传的机制，在定时器结束前发送所有已发送但还未接收到确认应答的报文段。")])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("快速恢复")]),t._v("是对快速重传的后续处理，因为网络中可能已经出现了拥塞情况，所以会将慢启动的阀值减小为原来的一半，然后将拥塞窗口的值置为减半后的阀值，然后开始执行拥塞避免算法，使得拥塞窗口缓慢地加性增大。简单来理解就是，乘性减，加性增。")])])]),t._v(" "),v("h2",{attrs:{id:"http状态码"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http状态码"}},[t._v("#")]),t._v(" http状态码")]),t._v(" "),v("p",[t._v("1xx\t信息状态码")]),t._v(" "),v("p",[t._v("2xx\t成功状态码")]),t._v(" "),v("p",[t._v("3xx\t重定向状态码")]),t._v(" "),v("p",[t._v("4xx\t客户端错误状态码")]),t._v(" "),v("p",[t._v("5xx\t服务器错误状态码")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("状态码")]),t._v(" "),v("th",[t._v("信息")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("100")]),t._v(" "),v("td",[t._v("继续")])]),t._v(" "),v("tr",[v("td",[t._v("101")]),t._v(" "),v("td",[t._v("切换协议")])]),t._v(" "),v("tr",[v("td",[t._v("200")]),t._v(" "),v("td",[t._v("请求成功")])]),t._v(" "),v("tr",[v("td",[t._v("300")]),t._v(" "),v("td",[v("code",[t._v("Multiple Choices")]),t._v("：多重选择，请求有多个可能的响应")])]),t._v(" "),v("tr",[v("td",[t._v("301")]),t._v(" "),v("td",[v("code",[t._v("Moved Permanently")]),t._v("：永久重定向")])]),t._v(" "),v("tr",[v("td",[t._v("302")]),t._v(" "),v("td",[v("code",[t._v("Found")]),t._v("：临时重定向，通过"),v("code",[t._v("Location")]),t._v("响应头确定重定向的地址")])]),t._v(" "),v("tr",[v("td",[t._v("304")]),t._v(" "),v("td",[v("code",[t._v("Not Modified")]),t._v(" ：内容被缓存了未改变")])]),t._v(" "),v("tr",[v("td",[t._v("400")]),t._v(" "),v("td",[v("code",[t._v("Bad Request")]),t._v("： 客户端请求的语法错误，服务器无法理解")])]),t._v(" "),v("tr",[v("td",[t._v("401")]),t._v(" "),v("td",[v("code",[t._v("Unauthorized")]),t._v("：要求身份认证")])]),t._v(" "),v("tr",[v("td",[t._v("403")]),t._v(" "),v("td",[v("code",[t._v("Forbidden")]),t._v("：服务器理解请求但拒绝执行")])]),t._v(" "),v("tr",[v("td",[t._v("404")]),t._v(" "),v("td",[v("code",[t._v("Not Found")]),t._v("：资源找不到")])]),t._v(" "),v("tr",[v("td",[t._v("405")]),t._v(" "),v("td",[v("code",[t._v("Method Not Allowed")]),t._v("：请求的方法不被允许")])]),t._v(" "),v("tr",[v("td",[t._v("500")]),t._v(" "),v("td",[v("code",[t._v("Internal Server Error")]),t._v("：服务器内部错误")])]),t._v(" "),v("tr",[v("td",[t._v("501")]),t._v(" "),v("td",[v("code",[t._v("Not Implemented")]),t._v("：服务器不支持请求的功能，无法完成请求")])]),t._v(" "),v("tr",[v("td",[t._v("502")]),t._v(" "),v("td",[v("code",[t._v("Bad Gateway")]),t._v("：作为网关或代理工作的服务器从上游服务器收到无效响应")])]),t._v(" "),v("tr",[v("td",[t._v("503")]),t._v(" "),v("td",[v("code",[t._v("Service Unavailable")]),t._v("：服务器目前无法使用（由于超载或停机维护）")])]),t._v(" "),v("tr",[v("td",[t._v("504")]),t._v(" "),v("td",[v("code",[t._v("Gateway Timeout")]),t._v("：作为网关或代理的服务器，未能及时从上游服务器接收请求")])]),t._v(" "),v("tr",[v("td",[t._v("505")]),t._v(" "),v("td",[v("code",[t._v("HTTP Version Not Supported")]),t._v("：服务器不支持请求的HTTP协议版本")])])])]),t._v(" "),v("h2",{attrs:{id:"浏览器存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器存储"}},[t._v("#")]),t._v(" 浏览器存储")]),t._v(" "),v("blockquote",[v("p",[t._v("cookie\tsessionStorage\tlocalStorage")])]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("cookie")]),t._v(" "),v("th",[t._v("sessionStorage")]),t._v(" "),v("th",[t._v("localStorage")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("生命周期")]),t._v(" "),v("td",[t._v("设置的有效期内存在，即使浏览器关闭。默认关闭浏览器失效")]),t._v(" "),v("td",[t._v("会话窗口，浏览器关闭失效")]),t._v(" "),v("td",[t._v("持久存在，即使浏览器关闭")])]),t._v(" "),v("tr",[v("td",[t._v("传输")]),t._v(" "),v("td",[t._v("同源http请求中携带，在c/s端来回传输，即使不需要")]),t._v(" "),v("td",[t._v("本地保存，不传输")]),t._v(" "),v("td",[t._v("本地保存，不传输")])]),t._v(" "),v("tr",[v("td",[t._v("大小")]),t._v(" "),v("td",[t._v("容量小，4k")]),t._v(" "),v("td",[t._v("容量大，5M或更多")]),t._v(" "),v("td",[t._v("容量大，5M或更多")])]),t._v(" "),v("tr",[v("td",[t._v("共享性")]),t._v(" "),v("td",[t._v("同源窗口共享")]),t._v(" "),v("td",[t._v("会话跳转的页面可以共享sessionStorage")]),t._v(" "),v("td",[t._v("同源窗口共享")])])])]),t._v(" "),v("h2",{attrs:{id:"get和post"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#get和post"}},[t._v("#")]),t._v(" Get和Post")]),t._v(" "),v("p",[v("strong",[t._v("误区：http协议并未规定get和post的请求长度限制")])]),t._v(" "),v("p",[t._v("Get的最大长度是"),v("strong",[t._v("浏览器和服务器限制")]),t._v("的。不同浏览器有不同的长度限制。")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th"),t._v(" "),v("th",[t._v("get")]),t._v(" "),v("th",[t._v("post")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("后退/刷新")]),t._v(" "),v("td",[t._v("无害")]),t._v(" "),v("td",[t._v("数据会被重新提交")])]),t._v(" "),v("tr",[v("td",[t._v("书签")]),t._v(" "),v("td",[t._v("可收藏为书签")]),t._v(" "),v("td",[t._v("不可收藏为书签")])]),t._v(" "),v("tr",[v("td",[t._v("缓存")]),t._v(" "),v("td",[t._v("能被缓存")]),t._v(" "),v("td",[t._v("不能缓存")])]),t._v(" "),v("tr",[v("td",[t._v("编码类型")]),t._v(" "),v("td",[t._v("application/x-www-form-urlencoded")]),t._v(" "),v("td",[t._v("application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。")])]),t._v(" "),v("tr",[v("td",[t._v("历史")]),t._v(" "),v("td",[t._v("参数保留在浏览器历史中。")]),t._v(" "),v("td",[t._v("参数不会保存在浏览器历史中。")])]),t._v(" "),v("tr",[v("td",[t._v("对数据长度的限制")]),t._v(" "),v("td",[t._v("是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。")]),t._v(" "),v("td",[t._v("无限制。")])]),t._v(" "),v("tr",[v("td",[t._v("对数据类型的限制")]),t._v(" "),v("td",[t._v("只允许 ASCII 字符。")]),t._v(" "),v("td",[t._v("没有限制。也允许二进制数据。")])]),t._v(" "),v("tr",[v("td",[t._v("安全性")]),t._v(" "),v("td",[t._v("与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！")]),t._v(" "),v("td",[t._v("POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。")])]),t._v(" "),v("tr",[v("td",[t._v("可见性")]),t._v(" "),v("td",[t._v("数据在 URL 中对所有人都是可见的。")]),t._v(" "),v("td",[t._v("数据不会显示在 URL 中。")])])])]),t._v(" "),v("h2",{attrs:{id:"在地址栏输入url回车后-都发生了什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#在地址栏输入url回车后-都发生了什么"}},[t._v("#")]),t._v(" 在地址栏输入URL回车后，都发生了什么？")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/rookiepjx/image-bed/img/Snipaste_2020-12-05_16-28-05.jpg",alt:""}})]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("解析URL")])])]),t._v(" "),v("p",[t._v("URL主要由以下几个部分组成：")]),t._v(" "),v("p",[v("strong",[t._v("- a.传输协议 - b.服务器 - c.域名 - d.端口 - e.虚拟目录 - f.文件名 - g.锚 - h.参数")])]),t._v(" "),v("p",[t._v("例如 [https://baike.baidu.com:80/item/HTML?fr=aladdin#4_1]")]),t._v(" "),v("p",[t._v("当在浏览器中输入URL后，浏览器首先对拿到的URL进行识别，抽取出域名字段。")]),t._v(" "),v("ol",{attrs:{start:"2"}},[v("li",[v("strong",[t._v("DNS域名解析")])])]),t._v(" "),v("p",[t._v("通过域名和IP地址一一对应，找到IP地址。")]),t._v(" "),v("ul",[v("li",[t._v("查询浏览器DNS缓存")]),t._v(" "),v("li",[t._v("查询操作系统缓存")]),t._v(" "),v("li",[t._v("查询hosts文件")]),t._v(" "),v("li",[t._v("查询路由缓存")]),t._v(" "),v("li",[t._v("向域名服务器发送请求查询")])]),t._v(" "),v("p",[t._v("获取到域名对应的IP后，向该IP地址定位的HTTP服务器发起TCP连接")]),t._v(" "),v("ol",{attrs:{start:"3"}},[v("li",[v("p",[v("strong",[t._v("浏览器与网站建立TCP连接（三次握手）")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("请求和发送数据")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("浏览器渲染页面")])])])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("解析html文件，"),v("strong",[t._v("创建DOM树")])])]),t._v(" "),v("li",[v("p",[t._v("解析css文件，形成"),v("strong",[t._v("css对象模型CSSOM")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("利用DOM和CSSOM构建一个渲染树（rendering tree）。")]),t._v(" 渲染树和DOM树有点像，但是是有区别的。")]),t._v(" "),v("p",[t._v("DOM树完全和html标签一一对应，但是渲染树会忽略掉不需要渲染的元素，比如head、display:none的元素等。")])])]),t._v(" "),v("ol",{attrs:{start:"6"}},[v("li",[t._v("浏览器根据**渲染树（rendering tree）**绘制页面")])]),t._v(" "),v("h2",{attrs:{id:"csrf和xss网络攻击和防范"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#csrf和xss网络攻击和防范"}},[t._v("#")]),t._v(" CSRF和XSS网络攻击和防范")]),t._v(" "),v("p",[v("strong",[t._v("CSRF 跨站请求伪造")])]),t._v(" "),v("p",[t._v("Cross-site request forgery")]),t._v(" "),v("p",[t._v("利用了用户已经认证的身份在不知情的情况下向服务器发送恶意请求。")]),t._v(" "),v("p",[t._v("CSRF攻击通常发生在用户已经登录了一个网站，并且该网站的会话信息（如Cookie）存储在浏览器中的情况下")]),t._v(" "),v("p",[v("strong",[t._v("防范")])]),t._v(" "),v("ol",[v("li",[v("p",[t._v("CSRF Token验证（常用） axios支持该功能")])]),t._v(" "),v("li",[v("p",[t._v("设置Cookie的SameSite属性，限制Cookie在跨站请求中的发送")])]),t._v(" "),v("li",[v("p",[t._v("Referer请求头验证，确保请求是从合法的来源发起的")])]),t._v(" "),v("li",[v("p",[t._v("CSP内容安全策略")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("服务器设置"),v("code",[t._v("Content-Security-Policy")]),t._v("响应头")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("Content-Security-Policy: default-src 'self'; script-src 'self'; style-src 'self';\n")])])])]),t._v(" "),v("li",[v("p",[t._v("前端设置"),v("code",[t._v("meta标签")])]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("<meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; style-src 'self';\">\n")])])])])])])]),t._v(" "),v("p",[v("strong",[t._v("XSS 跨站脚本攻击")])]),t._v(" "),v("p",[t._v("Cross Site Scripting（XSS是为了区别于CSS）")]),t._v(" "),v("p",[t._v("1、"),v("strong",[t._v("反射型")])]),t._v(" "),v("p",[t._v("当用户输入的数据未经适当处理或过滤，就被用在URL形成"),v("strong",[t._v("恶意链接")]),t._v("，被浏览器解析为HTML或JavaScript实施攻击。这个过程像一次反射，所以叫反射型XSS。")]),t._v(" "),v("p",[t._v("例如：")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("http://127.0.0.1:5000/index.html?a=<script>alert(123)<\/script>\n")])])]),v("p",[t._v("2、"),v("strong",[t._v("存储型")])]),t._v(" "),v("p",[t._v("恶意脚本被存储在目标服务器上（例如，数据库、消息论坛、访客留言等），当其他用户访问存储该脚本的页面时，脚本被执行。")]),t._v(" "),v("p",[t._v("3、"),v("strong",[t._v("DOM型")])]),t._v(" "),v("p",[t._v("当Web页面的Document Object Model（DOM）被JavaScript修改，且修改是基于用户的输入，而输入数据未被妥善处理时发生")]),t._v(" "),v("p",[v("strong",[t._v("防范")])]),t._v(" "),v("ol",[v("li",[t._v("输入过滤，确保不允许执行任何脚本")]),t._v(" "),v("li",[t._v("输出编码，进行HTML编码，防止浏览器将其解释为代码")]),t._v(" "),v("li",[t._v("使用安全API，如"),v("code",[t._v("textContent")]),t._v("而不是"),v("code",[t._v("innerHTML")]),t._v("，以减少XSS风险")]),t._v(" "),v("li",[t._v("设置cookie的"),v("strong",[t._v("HttpOnly")]),t._v("属性以避免cookie劫持")]),t._v(" "),v("li",[t._v("内容安全策略（CSP）")]),t._v(" "),v("li",[t._v("限制字符串长度。xss攻击要能达成往往需要较长的字符串，因此对于一些可以预期的输入可以通过限制长度强制截断来进行防御。")])]),t._v(" "),v("p",[v("strong",[t._v("CSRF 和 XSS 区别")])]),t._v(" "),v("p",[t._v("区别一：")]),t._v(" "),v("p",[t._v("CSRF：需要用户先登录网站A，获取 cookie。XSS：不需要登录。")]),t._v(" "),v("p",[t._v("区别二：（原理的区别）")]),t._v(" "),v("p",[t._v("CSRF：是利用网站A本身的漏洞，去请求网站A的api。XSS：是向网站 A 注入 JS代码，然后执行 JS 里的代码，篡改网站A的内容。")]),t._v(" "),v("h2",{attrs:{id:"跨域"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("原因：处于安全考虑，浏览器有同源限制策略，导致跨域问题。")]),t._v(" "),v("p",[t._v("同源："),v("strong",[t._v("协议名 域名 端口号 一致")])])]),t._v(" "),v("li",[v("p",[t._v("解决方法")]),t._v(" "),v("ul",[v("li",[t._v("JSONP(只支持get)")]),t._v(" "),v("li",[t._v("CROS 前后端协作设置请求头部"),v("code",[t._v("access-control-origin-allow:/*")])]),t._v(" "),v("li",[t._v("H5的WebSocket")]),t._v(" "),v("li",[t._v("H5的postMessage")])])]),t._v(" "),v("li",[v("p",[t._v("JSONP")])])]),t._v(" "),v("p",[v("strong",[t._v("实现原理")]),t._v("：浏览器对于"),v("code",[t._v("script")]),t._v("、"),v("code",[t._v("img")]),t._v("、"),v("code",[t._v("iframe")]),t._v("等标签的src属性没有进行同源限制，所以可以通过"),v("code",[t._v("script")]),t._v("标签的src属性发送请求。")]),t._v(" "),v("p",[t._v("利用html中script标签的src属性，来请求外部链接，当请求外部链接的时候，通过在url的后面加个回调函数的名字，后端会返回这个回调函数的执行，从而实现跨域")]),t._v(" "),v("p",[t._v("示例代码")]),t._v(" "),v("div",{staticClass:"language-javascript extra-class"},[v("pre",{pre:!0,attrs:{class:"language-javascript"}},[v("code",[v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("showJsonp")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" url "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://127.0.0.1:8787/?func=showJsonp'")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" script "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nscript"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("url"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nscript"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'type'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndocument"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementsByTagName")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'head'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),v("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 后端代码")]),t._v("\napp"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'*'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" callback "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("query"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("func"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),v("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" content "),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" callback"),v("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"({'message':'测试数据2'})\"")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  res"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("content"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),v("p",[t._v("结果浏览器执行"),v("code",[t._v("showJonp({'message':'测试数据2'})")]),t._v(",控制台打印"),v("code",[t._v("测试数据2")])]),t._v(" "),v("p",[v("strong",[t._v("优点")]),t._v("：对于浏览器的兼容性好")]),t._v(" "),v("p",[v("strong",[t._v("缺点")]),t._v("：只支持跨域的get请求")]),t._v(" "),v("ul",[v("li",[t._v("CROS")])]),t._v(" "),v("p",[t._v('CORS是一个W3C标准，全称是"跨域资源共享"（Cross-origin resource sharing），属于跨源 AJAX 请求的根本解决方法')]),t._v(" "),v("p",[v("strong",[t._v("方法1")]),t._v("：后端设置请求头")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("Access-Control-Allow-Origin：'域名或者通配符*'\n")])])]),v("p",[v("strong",[t._v("方法2")]),t._v("：在Nginx的配置文件中加上以下代码")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("location /api/ { #这里设置了/api，那么前端在请求时的基础路径就得加上/api\n    proxy_pass http://127.0.0.1:4000/;#这里指的是你的服务器运行在哪个端口\n}\n")])])]),v("p",[v("strong",[t._v("方法3")]),t._v("：前端VUE或者REACT设置代理")]),t._v(" "),v("p",[t._v("这里只拿Vue来举例子\n在vue.config.js这个配置文件中加上")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("module.exports = {\n  devServer: {\n    open: true,\n    proxy: {\n      '/api': { // 匹配所有以'/api'开头的请求路径\n        target: 'http://target.com', // 代理目标的基础路径\n        changeOrigin: true, // 支持跨域\n        pathRewrite: { // 重写路径: 去掉路径开头的'/api'\n          '^/api': ''\n        }\n      }\n    }\n  },\n}\n")])])]),v("p",[v("strong",[t._v("优点")]),t._v("：简单，更安全，支持post请求")]),t._v(" "),v("p",[v("strong",[t._v("缺点")]),t._v("：兼容性差，只支持IE10以上")]),t._v(" "),v("h2",{attrs:{id:"浏览器缓存机制"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[t._v("#")]),t._v(" 浏览器缓存机制")]),t._v(" "),v("p",[v("strong",[t._v("强制缓存")])]),t._v(" "),v("p",[t._v("当使用强制缓存策略时，客户端会直接访问本地缓存，存在则直接返回；不存在则向服务器发送请求，响应后再存入缓存。")]),t._v(" "),v("p",[t._v("开启强制缓存，可以添加"),v("strong",[t._v("响应头字段:Expire和Catch-control")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("Expire")])]),t._v(" "),v("p",[v("strong",[t._v("http1.0")]),t._v("中提出，通过"),v("strong",[t._v("绝对时间")]),t._v("表示缓存到期时间。在过期时间之前，都使用缓存。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("Expires: Thu, 10 Nov 2017 08:45:11 GMT\n")])])]),v("p",[t._v("缺点：")]),t._v(" "),v("ol",[v("li",[t._v("绝对时间的表示方法，可能由于被本地修改或者时差导致缓存失效")]),t._v(" "),v("li",[t._v("表示方法复杂")])])]),t._v(" "),v("li",[v("p",[v("code",[t._v("Catch-control")])]),t._v(" "),v("p",[t._v("为解决expire的缺点，"),v("strong",[t._v("http1.1")]),t._v("提出catch-control响应头字段。通过"),v("strong",[t._v("相对时间")]),t._v("表示缓存过期时间。")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("Cache-control: max-age=2592000\n")])])]),v("p",[t._v("常用值：max-age、no-catch、no-store等")]),t._v(" "),v("p",[t._v("no-store ，用来指定资源不能够被缓存，no-cache 代表该资源能够被缓存，但是立即失效，每次都需要向服务器发起请求")])])]),t._v(" "),v("p",[v("strong",[t._v("注意")]),t._v("：当两个响应头同时存在，"),v("strong",[t._v("Cache-control的优先级高于Expires")]),t._v("（http1.1>http1.0）")]),t._v(" "),v("p",[v("strong",[t._v("协商缓存")])]),t._v(" "),v("p",[t._v("使用协商缓存策略时，会先向服务器发送一个请求，如果资源没有发生修改，则返回一个 "),v("strong",[t._v("304")]),t._v(" 状态，让浏览器使用本地的缓存副本。如果资源发生了修改，则返回修改后的资源。")]),t._v(" "),v("p",[t._v("开启协商缓存，可以设置"),v("strong",[t._v("响应头字段的Etag 和 Last-Modified")])]),t._v(" "),v("ul",[v("li",[v("p",[v("code",[t._v("Last-modified")])]),t._v(" "),v("p",[t._v("服务器通过在响应头中添加 Last-Modified 属性来指出资源最后一次修改的时间，当浏览器下一次发起请求时，会在请求头中添加一个 "),v("strong",[t._v("If-Modified-Since")]),t._v(" 的属性，属性值为上一次资源返回时的 Last-Modified 的值。当请求发送到服务器后服务器会通过这个属性来和资源的最后一次的修改时间来进行比较，以此来判断资源是否做了修改。如果资源没有修改，那么返回 304 状态，让客户端使用本地的缓存。如果资源已经被修改了，则返回修改后的资源。")]),t._v(" "),v("p",[t._v("缺点：单位精确到秒，如果1秒内缓存被多次修改，会失效。")])]),t._v(" "),v("li",[v("p",[v("code",[t._v("Etag")])]),t._v(" "),v("p",[t._v("为避免Last-modified的不精确性，Etag返回唯一标识符，通常是"),v("strong",[t._v("hash值")]),t._v("。当资源发生改变的时候，这个值也会发生改变。在下一次资源请求时，浏览器会在请求头中添加一个 "),v("strong",[t._v("If-None-Match")]),t._v(" 属性，这个属性的值就是上次返回的资源的 Etag 的值。服务接收到请求后会根据这个值来和资源当前的 Etag 的值来进行比较，以此来判断资源是否发生改变，是否需要返回资源。")])])]),t._v(" "),v("p",[v("strong",[t._v("注意")]),t._v("：当两个响应头同时存在，"),v("strong",[t._v("Etag的优先级高于Last-Modified")])]),t._v(" "),v("p",[t._v("强缓存策略和协商缓存策略在缓存命中时都会直接使用本地的缓存副本，区别只在于协商缓存会向服务器发送一次请求。它们缓存不命中时，都会向服务器发送请求来获取资源。在实际的缓存机制中，强缓存策略和协商缓存策略是一起合作使用的。浏览器首先会根据请求的信息判断，强缓存是否命中，如果命中则直接使用资源。如果不命中则根据头信息向服务器发起请求，使用协商缓存，如果协商缓存命中的话，则服务器不返回资源，浏览器直接使用本地资源的副本，如果协商缓存不命中，则浏览器返回最新的资源给浏览器。")])])}),[],!1,null,null,null);v.default=a.exports}}]);